'''
javascript代码在html文件中，放置在<script type="text/javascript"></script>标签中，
    该标签一般放置在<head>或<body>的尾部
    在html5中<script> </script>标签的type属性的默认参数为"text/javascript"，可以不用再写
在html文件中，导入js文件的方式为<script src="js文件地址"></script>标签中，该标签一般放置在<head>或<body>的尾部

JavaScript代码的注释为 /* ... */ 或 //...

变量
    创建变量
        var 变量名 = 值;
            var 关键字，用于声明变量
        let 变量名 = 值;
            let  关键字，用于声明一个变量
        var与let区别
            var的声明的作用域类似于python中的变量设置，但let的作用域只在它存在的{}中，即使是在if或for中使用，也不会创建全局变量
            var只要在代码中存在，哪怕在声明一个变量前调用了该变量，也会得到undefined的值而不会报错，let会报错
            var可多次声明同一个变量，但let在同一个{}中只能声明一次
        const 变量名 = 值;
            类似于let，只是用于声明常量，但当常量为数组或对象时，其中的元素可以被改变
    查看变量
        console.log(变量名);
            之后在检查中的console中可查看该变量的值
    查看变量的数据类型
        console.log(typeof 变量名)

字符串
    字符串方法
        字符串名.length;  获取字符串长度
        字符串.trim()  消除字符串中的空格
        字符串.substring(开始位数，结束位数)  获取从某处至某处的值，不会得到结束位数的值
        string1.concat(string2)  将string2接在string1的后面，不会有空格
        Number(字符串)  将字符串转为数字
    模板字符串，用反引号`包裹，在其中可用${变量名}来插入变量

对象
    创建对象
        对象名 = {
                键名1: 值1,
                键名2: 值2
        }
            javascript中的键名不一定要加引号
    对象取值
        对象名.键名 = 值  修改某个键的值，也可用于添加原本没有的键值对
            此时键名不能加引号，因为会自动将 键名 转换为字符串来匹配对象的键名
        对象名[键名] = 值
            此时键名必须加引号，因为会用 [] 中的值来匹配对象的键名
    对象方法
        delete 对象名.键名  删除某个键和它的值
        delete 对象名[键名]  此时键名必须加引号

数组
    创建数组
        var 数组名 = [1,2,3,4,5]
        var 数组名 = Array([1,2,3,4,5])
            数组本质上是每一项的键名为从零开始自增的数字的对象
    数组取值
        数组名[从0开始的位数]  获取数组的指定位数的值
            也可以用于替换某一位的值
    数组方法
        数组名.push(值)  添加一个值到可迭代对象的末尾
        数组名.unshift(值)  添加一个值到可迭代对象的开头
        数组名.splice(索引, num)  删除指定索引处的值
            当num为1时，表示将对应索引处的项删除一次，该值可为更大的数字表示多次删除
        数组名.splice(索引, 0, 值)  在指定索引处插入值
            当num为0时，表示不删除任何一项，同时将该值插入为索引处
            当num为1时，表示删除该索引的项后将该值作为新项加入指定索引处，即项的值的替换
        数组名.pop()  从尾部删除一个值
        数组名.shift()  从开头删除一个值
        数组名.slice(开始索引, 结束索引)  截取指定索引处的元素，包含开始，不包含结束，返回一个新的数组
        Array.from({ length: num })  创建一个有num个元素的数组，每个元素都为undifine
        Array(num)  创建一个长度为num的稀疏数组，每一个元素的值为 empty slots，该数组不可被遍历
        [...Array(num)]  展开稀疏数组，将其中每一项赋值为undefined，生成一个有num个元素的数组

遍历
    对可迭代对象进行循环 // js中对象不属于可迭代对象
        for(var i in 变量名){
                行为
        }
            此时的i与python中的不同，此处的i是键名，在对列表时表现为索引，每次循环时分别为0,1,2,3,4
            如果要每次循环时得到索引的值，仍然需要用 变量名[i] 的方式
            break和continue同样可用
            for in 会对可迭代对象的索引及其原型链上的属性进行遍历，可能会得到不需要的数据
        for(var i of 变量名){
                行为
        }
            只会对可迭代对象的元素进行遍历，可以直接得到元素的值而不是索引，不受原型链上的属性影响
            当i的值为一个引用传递，并且对i赋值一个新的引用传递时，原数组中i对应的被迭代的项的引用传递不会更新，仍然指向原来的那个引用传递
                当遇到这种情况时，可对原数组使用.map修改i的引用传递

    数组.map(function f(value, index){
        return value+1
    })
        遍历数组中的每个值和索引，对其执行function，并将这些返回值组成一个新的数组返回，索引可忽略

    数组.filter(i => {return i !== 0})
        遍历可迭代对象，对每一项进行条件判断，只有return的返回值为真的项才保留，返回一个新数组

    可迭代对象.reduce((prev, current) => return xxx)
        第一次将数组的第一项作为prev，第二项作为current，第二次将上一步的return作为prev，第三项作为current，以此类推

    数组.findIndex(i => {return i === 1})
        遍历数组，当目标项的值使return语句返回值为真时，返回该项的索引，如果全部为假，返回索引 -1

    数组.find(i => {return i === 1})
        遍历数组，当目标项的值使return语句返回值为真时，返回该项的值，如果全部为假，返回undefined

    数组.forEach((每一项的值, 每一项的索引, 数组本身) => { // 每一项的索引和数组本身可省略
        console.log();
    });
        遍历数组中的每个值，对该值进行操作，返回undefined

    Object.keys(对象)  返回对象中的键组成的数组
    Object.values(对象)  返回对象中的值组成的数组
    Object.entries(对象)  返回一个数组，数组中的一个元素为对象中的一个键和值组成的数组
        如 [[键1, 值1], [键2, 值2], ...]

    ... ，展开运算符
        ...数组名  返回数组中的每一项，不会修改原数组
        ...对象名  返回对象中的每一项，不会修改原对象

排序
    数组.sort()  默认将数组中元素视作字符串，按照字符串的Unicode码从小到大进行排序，返回排序后的数组，会修改原数组
    数组.sort((a,b) => {return value})
        a和b代表数组中任意两个待比较的元素
        如果value为负数，那么a会被排在b的前面，
        如果value为正数，那么a会被排在b的后面，
        如果value为零，那么a和b的相对顺序不变
        当value为 a-b 时，实现递增，当value为 b-a 时，实现递减
        如果数组中的元素是对象，那么可以通过 a.属性 和 b.属性 来根据对象中的元素的值进行排序

条件语句
    if (条件1) {
            行为1
    }else if (条件2) {
            行为2
    }else{
            行为3
    }

函数
    定义函数
        关键字声明
            function 函数名(参数) {
                    函数体
            }
        函数表达式
            const 函数名 = function (参数) { 函数体 }  也可通过这种方式创建函数
                function () {} 实际上是创建了一个匿名函数，将这个匿名函数复制给变量，使该变量可通过 函数名() 来调用这个匿名函数
        箭头函数
            const 函数名 = (参数1, 参数2) => { 函数体 }  通过const
            (参数1, 参数2) => 结果  当函数体为只有return的语句时，可将return语句如此简写
            参数 => { 函数体 }  当参数只有一个时，括号可省略
            () => { 函数体 }  当不需要参数时，参数可省略
    参数
        动态参数
            函数中默认存在arguments变量，用于存放所有被传入的参数，即使是 函数名() 中没有定义参数名的数据
        剩余参数
            在定义时使用 函数名(...参数) ，额外传入的数据也会被该参数接收
                在函数内部调用 参数 时，其值为接收的数据组成的数组
                也可直接在函数中通过展开操作符来调用这个数组， ...参数 ，其值为 参数1,参数2...
        默认参数
            js中可以在定义函数时通过 参数名=值 来设置参数的默认值，但无法在调用时通过 参数名=值 传值
            需要使用对象结构赋值来实现
                const 函数名 = ({param1=1 ,param2=2}) => {}
                函数名({param1:100, params2:200})
    函数内作用域提升
        将一个内嵌函数分配给一个全局对象，即将该内嵌函数声明为全局函数
        function 函数名1() {
                function 函数名2() {}
                window.函数名2 = 函数名2  创建一个名字相同的全局函数并为它赋值
        #}
    访问外部变量
        js的函数中可直接通过变量名访问函数外部定义的变量，并修改该变量的值
'''
