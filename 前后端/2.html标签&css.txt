'''
html标签
 格式
  <开始标签 属性名1="属性值1" 属性名2="属性值2"...>内容</结束标签>

 标签类型
  块级标签，一个块级元素出现在它前面的内容之后的新行上并且块级元素后面的内容也会出现在新的行上。
  内联标签，通常出现在块级元素中并环绕文档内容的一小部分，而不是一整个段落或者一组内容。内联元素不会导致文本换行
  空标签，只有一个开始标签，通常用来在此元素所在位置插入/嵌入一些东西

 常见标签
  <!DOCTYPE html>  声明文档类型为html，必须在一个html文件的开头
  <html> </html>  根标签，包裹页面中所有内容
  <head> </head>  包含了文档标题、字符集、样式、脚本等其他信息
   <meta charset="utf-8">  将字符集设置为 UTF-8
   <title> </title>  设置了页面的标题，也就是出现在该页面加载的浏览器标签中的内容。
  <body> </body>  包含文本、图片、视频、可播放音频等其他直接显示的信息
   <h1> </h1>  标题式加大加粗
   <p> </p>  将这行文字作为一个段落呈现
   <div> </div>  用于包裹其它标签，块级元素
   <span> </span>  包裹这些文字，内联元素
   <img/>  插入一个图片，内联元素
    src  声明图片的地址
    alt  当图片文件不存在时，显示此属性值的文字
   <a> </a>  锚，它使被标签包裹的内容成为一个超链接。内联元素
    href  声明超链接的web地址
    title  当鼠标悬停在超链接上面时，这部分信息将以工具提示的形式显示
    target  target="_blank" 将在新标签页中显示链接。如果你希望在当前标签页显示链接，忽略这个属性即可
   <ul> </ul>  列表标签，在其中用<li> </li>来显示列表中的每一项
   <table> </table>  创建一个数据表
    <thead> </thead>  构建一个数据表的表头
     <tr> </tr>  table row，在表头标签中表示一行
      <th> </th>  table header cell，在表头标签的一行中表示一个单元格
    <tbody> </tbody>  表体标签，构建一个数据表的表数据
     <tr> </tr>  在表体标签中表示一行
      <td> </td>  table data cell，在表体标签的一行中表示一个单元格
   <select> </select>  创建一个选项卡，用<option> </option>作为一个选项
    通过给<select>设置name属性，给<option>设置value属性，可在提交数据时实现选项名与值的对应
   <input >  在其中包含可输入数据
    name  为被输入的数据命名
    type  设置为text，表示文本输入框
          设置为password，输入不会直接显示
          设置为file，可输入文件
          设置为radio，可进行布尔值选择，同名同时被选择时互斥
          设置为checkbox，可进行布尔值选择，同名同时被选择时不会互斥，当被选择时才会提交name和value数据
          设置为button，表示可点击按钮
          设置为submit，表示可提交按钮
          设置为hidden，表示该标签不可见
    placeholder  预先显示在输入框上的文字
    readonly  设置为true时，表示该标签为只读
    value  会作为一直显示在输入框上的文字，同时在输入框中输入后的内容会被赋值给value
   <textarea> </textarea>  可输入多行文本
    rows  限制多行文本的高度
   <!-- -->  注释
   <video> </video>  视频标签
    controls  如果存在该属性，则显示播放按钮
    poster  声明视频封面
    <source />  资源标签，位于视频标签中
     src  指定视频的地址
     type  指定视频的文件类型


 标签样式，标签可通过style设置各项样式属性，样式属性之间用 ; 分隔
  如<div style="样式属性1: 值1; 样式属性2: 值2"></div>
  style的各项属性
   height: 数值px  高度
   width: 数值px  宽度
   width: 数值%  宽度
   display: inline  强制将该标签视为内联标签，高度与宽度的修改对其不可用，内外边距的修改对其不可用
   display: block  强制将该标签视为块级标签，即使宽度不占用整块屏幕，空出来的右半部分也不可用
   display: inline-block  强制将该标签具有内联与块级标签的特点，高度与宽度的修改可用，空出来的右半部分可用
   display: none  不显示该标签的内容，也不会占据空间，如果对一个标签设该值，那么其所有子标签也会隐藏
   color: 颜色(可用rgb编码)  颜色
   background-color: 颜色  背景色
   opacity: 颜色的透明度，为0时不可见，为1时完全可见
   font-size: 数值px  字体大小
   font-weight: 数值px  字体粗细
   font-family: 字体名  字体
   text-align: center  文字水平方向上居中
   line-height: 数值px  单行高度，当单行高度与块级标签的高度相等时，实现行内文字垂直方向上居中
   float: left  向左浮动，可使得块级元素不会再占据未使用的宽度
   float: right  向右浮动，可使得元素从右侧开始排列
   clear: both  此元素将不允许浮动元素出现在其左侧或右侧，即它将出现在所有浮动元素的下方，用于撑开浮动元素的父元素
   padding-top: 数值px  从框架顶部开始填充，即内部的顶边距
   padding-left: 数值px  从框架左侧开始填充，即内部的左边距，当左边距和右边距都是auto时，水平居中
   padding-right: 数值px  从框架右侧开始填充，即内部的右边距
   padding-bottom: 数值px  从框架底部开始填充，即内部的底边距
   margin-top: 数值px  外部的顶边距，<body> </body>默认有外边距
    margin: 数值1px 数值2px 数值3px 数值4px  依次调整上右下左的外边距
   position: fixed  将此标签固定在窗口的一个固定位置，不随页面的变化而移动
    设置后，通过 top/left/right/bottom: 数值px 来修改距离上左右下的距离
   position: relative  将此标签视为被设置了absolute参数的标签的绝对位置坐标
   position: absolute  此标签以设置了relative参数的标签为绝对位置，通过 top/left/right/bottom: 数值px 来设置相对距离
   border: 数值px solid 颜色  设置边框的厚度，边框线，颜色
   cursor: point  当鼠标移至该标签时变为用手指着的样式
   vertical-align: top  当一个图片有着和他同行的元素时，默认该图片与另一个元素的底部对齐，该设置修改为顶部对齐
   aspectRatio: 16/9  自动设置宽高比
   flex父标签
    display: flex  该标签下的子标签使用flex布局
    flex-direction: row/column  子标签使用水平或垂直排列
    justify-content: space-between/start/end  子标签对齐方式
    flex-wrap: wrap/nowrap  子标签是否自动换行
   flex子标签
    flex-grow: 1/0  是否可响应式的增大，默认为0
    flex-shrink: 1/0  是否可响应式的缩小，默认为1
    flex-basis: 100px  基础宽度，默认为auto
    flex: 0 1 auto  为同时设置三种属性的简写
    flex: 3  为 flex: 3 1 auto 的简写，当与 flex: 1 同时作为子标签时，表示自动占据 3/4 的空间
   grid父标签
    display: grid  该标签下的子标签使用grid布局
    grid-template-columns: 200px 100px 200px  一行中的三个子标签的宽度
    grid-template-rows: 50px 60px  两行的高度
    grid-template-rows: repeat(2, 50px)  指定行数的高度，相当于 grid-template-rows: 50px 50px
    grid-template-columns: repeat(auto-fill, 200px)  当行宽度变化时，尽可能以指定宽度来容纳子标签
    grid-template-columns: 1fr 2fr  一行中按比例设置两个子标签的宽度
    grid-template-columns: 1fr minmax(100px 2fr)  设置子标签的最小和最大的宽度
    grid-template-columns: 100px auto 100px  设置当有剩余空间时，子标签占据所有剩余空间
    row-gap: 10px  子标签之间的上下间距
    column-gap: 20px  子标签之间的左右间距
    gap: 10px 20px  简写，设置左右和上下间距
    justify-items: start/end/center  同一行的子标签的水平对齐方式
    align-items: start/end/center  不同行之间的垂直对齐方式
   grid子标签
    grid-column: 1/3  设置子标签在该行的开始位和结束位
    grid-column: span 2  设置子标签占据的位数
    justify-self: start/end/center  设置子标签在该行的水平对齐方式

css，Cascading Style Sheets，层叠式样式表，统一设置标签的样式
 直接写在html文件内
  在<head>标签的<style>标签中根据不同选择器的格式写入css。注释方式为 /* */
  选择器
   类选择器
    .类名1{ 样式属性1: 值1;
           样式属性2: 值2;
           ...
    }
    ...
    后在<body>标签中的标签的标签头中有 class='类名1' ，通过class属性调用类中的style的值
     如 <div class='类名1'></div> 相当于 <div style='样式属性1: 值1; 样式属性2: 值2; ...'></div>
   标签选择器
    标签名{ 样式属性1: 值1;
           样式属性2: 值2;
           ...
    }
    ...
    会直接对所有 <标签名> 的标签应用这些style的样式属性
   属性选择器
    标签名[属性名=属性值]{ 样式属性1: 值1;
           样式属性2: 值2;
           ...
    }
    ...
    会对所有 <标签名 属性名=属性值> 的标签应用这些style的样式属性
   后代选择器
    .类名1 标签名{ 样式属性1: 值1;
                 样式属性2: 值2;
                 ...
    }
    ...
    会对所有 <标签名 class='类名'> 的标签应用这些style的样式属性
 写在css文件中
  在css文件中写入根据各类选择器写出的css代码
  在html文件的<head>的 <link/> 标签的标签头中
   通过 rel='stylesheet' 属性指定导入文件的文件类型为css文件
   通过 href='文件名.css' 属性指定要导入的css文件
'''


