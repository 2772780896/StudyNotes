npm i mockjs

在react的入口文件，根index.js中 import 'mock' 以启动mock

src下创建mock文件夹，创建index.js
    import Mock from 'mock'
    export const response = Mock.mock(
        '前端所请求的网页路径',
        'get/post', // 参数可省略，省略时匹配所有请求
        {
            code: 200,
            message: 'ok',
            data: 响应数据
        }
    )

响应数据格式
    // 随机生成一到十个列表
    "list|1-10": [] // 返回的数据为 list: [[],[],...]
    // 随机生成一到十个字符
    "string|1-10": ""
    // 随机生成1-100之间的任意整数
    "number|1-100": 1
    // 随机生成一个浮点数，整数部分为1-100，小数部分为1到10位。
    "floatNumber|1-100.1-10": 1
    // 随机生成一个布尔值
    "boolean|1": true
    // 随机生成一个布尔值，值为false的概率是 2/(2+5) ，值为true的概率是 5/(2+5)
    'bool|2-5': false
    // 随机生成一个对象，随机选取2-4个元素作为对象的元素
    "object|2-4": {1, 2, 3, 4}

随机生成
    const Random = Mock.Random
    响应数据格式
        // 生成随机字符串，长度为5
        Random.string(5)/'@string(5)'
        // 生成随机中文字符，长度为2-5
        Random.cword(2, 5)/'@cword(2, 5)'
        // 生成随机邮箱地址，xxx@163.com
        Random.email('163.com')/"@email('163.com')"
        // 生成随机的布尔值
        Random.boolean()/'@boolean()'
        // 生成随机随机整数，值为60-100
        Random.integer(60, 100)/'@integer(60, 100)'
        // 生成随机浮点数，整数部分为1-100，小数部分位数为3-5
        Random.float(1, 100, 3, 5)/'@float(1, 100, 3, 5)'
        // 生成随机日期
        Random.datetime('yyyy-MM-dd')/"@datetime('yyyy-MM-dd')"
        // 生成随机时间，返回值为 "21:33:01"
        Random.time()/"@time()"
        // 生成定制的图片url，参数为 (尺寸, 背景色, 文字颜色, 图片格式, 图片上文字)，返回值为 "http://dummyimage.com/200x100/16d46b/fff.png&text=Hello"
        Random.image('200x100', '#16d46b', '#fff', 'png/jpg/gif', 'Hello')
        // 生成随机 Base64 图片编码，参数为 (尺寸, 图片上文字)
        Random.dataImage( '200x100', 'Hello' )
        // 生成随机颜色，返回值为 "#3538B2"
        Random.color()
        // 生成随机元素，该元素随机从数组中选取
        Random.pick(['a', 'e', 'i', 'o', 'u'])/'@pick(["a", "e", "i", "o", "u"])'
        // 生成随机列表，列表中元素为打乱后的列表元素
        Random.shuffle(['a', 'e', 'i', 'o', 'u'])/'@shuffle(["a", "e", "i", "o", "u"])'

获取get请求参数
    Mock.mock(
        /^\/路径1\/路径2(\?.*)?$/, // 对 /路径1/路径2 以及 /路径1/路径2?属性=值 进行匹配
        'get',
        function(options) {
            relativePath = options.url // 获取匹配到的相对url
            const url = new URL(relativePath, 'http://localhost') // 构建一个完整的url对象
            const param = url.searchParams.get('属性') // 通过url对象的方法获取属性的值，返回值为字符串
            // 返回值为Mock.js对象时，会解析对象中的参数再将其渲染为json对象
            return Mock.mock({
                code: 200,
                message: '查询成功',
                data: param
            })
        }
    )
        Mock.mock()中定义的函数会在对应路径每次被访问时被直接调用用以返回json响应

获取post请求参数
    Mock.mock(
        /^\/路径1\/路径2(\?.*)?$/,
        'post',
        fuction(option) { // option实际上就是整个请求
            JSON.parse(options.body) // options.body获取请求体中的post数据，该数据是json，格式为字符串，需要将其解析为js对象
            return Mock.mock({
                code: 200,
                message: '登录成功',
                _headers: { // 通过_headers设置响应头中的信息
                    'Content-Type': 'application/json', // 模拟内容类型
                    'Set-Cookie': [ // 设置cookie，当浏览器看到响应头中的set-cookie时会自动设置cookie，可通过document.cookie获取设置的cookie
                        'session_id=abc123; Path=/; HttpOnly',
                        'user_pref=dark; Path=/; Expires=Fri, 31 Dec 2025 23:59:59 GMT'
                    ],
            })

        }
    )

获取请求头数据
    const header = options.xhr.requestHeaders
        通过header['数据名']获取对应值

