'''
安装git后在git终端gitbash中使用命令
git -v  查看git版本
git config --list  查看配置清单
git config --global user.name "用户名"  设置用户名
git config --global user.email "邮箱"  设置用户邮箱

创建git仓库
 git init  在当前文件夹下创建一个文件名为 .git 的git仓库，将此文件夹下的文件视作工作区
提交数据到git暂存区
 git add "文件路径"  将工作区的文件提交到暂存区 .git/index 中，当 '文件路径' 用 . 替换时，表示提交所有改动过的文件
 git ls-files  查看当前暂存区中的文件
 git rm --cached "文件路径"  将暂存区中的文件移除
提交数据到git仓库
 git commit -m "注释"  将暂存区的文件保存在版本库 .git/objects 中，生成一个7位16进制的版本号标识，并添加注释
 git log --oneline  查看版本库中存入和导出记录

文件标识
 U标识未被git暂存过的文件，A标识第一次被git暂存的文件，''标识工作区，暂存区，版本库中文件内容一致的文件，M标识修改过的文件
 git status -s  显示暂存区存在的文件的当前状态，返回为 标识符1标识符2 文件名 ，标识符1表明暂存区中状态，标识符2表明工作区中状态

数据回溯
 git restore "文件路径"  将工作区中文件的内容回溯为暂存区中对应文件的内容
 git reset --soft 版本号  将工作区和暂存区中的文件回溯为版本库中指定版本的文件，不影响标识符为U的文件
 git reset --hard 版本号  将工作区和暂存区中的所有文件清空，回溯为版本库中指定版本的文件
 git reset --mixed 版本号  将暂存区中的所有文件清空，回溯为版本库中指定版本的文件

文件忽略
 .gitignore文件，在其中写入文件名，则在提交到暂存区时忽略对目标文件的提交

分支  默认主支为master
 存在head指针，用于给工作区和暂存区指向当前所使用的分支，默认指向master
 git branch 分支名  创建新分支，从当前版本库中最新的版本开始延伸版本
 git checkout 分支名  切换当前分支，使head指针指向目标分支
 git branch  查看版本库中存在的分支
 git merge 分支名
  将目标分支合并到当前分支，即将目标分支延伸出的所有版本保存为当前分支的版本添加到到版本库
  如果目标分支开始延伸的版本不是当前分支的最新版本，会将目标分支延伸出的版本的创建时间与当前分支的开始延伸版本之后的版本的创建时间
  进行比较，创建时间早的排前，同时会将目标分支延伸出的最新版本与当前分支的最新版本合并保存为当前分支的版本添加到到版本库
  分支冲突，当分支中的新版本与主支中的新版本对同一个数据进行了修改时，合并分支时，发生冲突，不会直接进行合并，需手动选择如何保留数据修改才能继续合并
 git branch -d 分支名  删除分支

远程仓库
 绑定
  git remote add 仓库别名 仓库地址  绑定远程仓库
  git remote remove 仓库别名  取消绑定远程仓库
  git remote -v  查看绑定的远程仓库
 上传
  git push -u 仓库别名 本地分支名:远程分支名
   将本地分支推送到远程分支中，当两者名称相同时，可省略 :远程分支名
   当第一次推送时，需要进行账号密码的验证，生成一个凭据，可通过 控制面板/凭据管理器/windows凭据/普通凭据 来找到修改该凭据
   当远程仓库有内容更新而本地没有时，需先拉取远程仓库的新内容，然后才可以推送
 拉取
  git clone 仓库地址  克隆远程仓库，在当前文件夹下生成一个名为 仓库名 的文件夹，并自动运行 git remote add 仓库名 仓库地址 进行绑定
  git pull 仓库别名 远程分支名:本地分支名  拉取一个远程分支的新内容，将其与本地分支合并，当两分支名相同时，可简写
  git pull --rebase 仓库别名 远程分支名  当远程仓库已经有与本地无关的内容，而本地已有内容并不是从远程拉取而来时，无法直接拉取或提交，使用该命令强制将远程内容拉取到本地
 page服务  生成一个网址，该网址可解析库中的html文件
 代理
  git config --global http.proxy http://服务器地址  http代理
  git config --global https.proxy https://服务器地址  https代理
  git config --global https.proxy socks5://服务器地址  socks5代理
  git config --global --get https.proxy  查看代理
  git config --global --unset https.proxy  取消代理
'''