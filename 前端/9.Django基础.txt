'''
创建一个django项目
 cd到指定的目录，执行 C:\Users\xxx\PycharmProjects\code\venv\Scripts\django-admin.exe startproject 项目名

创建一个app
 cd到指定的目录，该目录一般为manage.py的上级目录，之后执行，python manage.py startapp app名
一个app下的常用文件
 urls.py文件用于编写url和函数的对应关系
 views.py文件用于编写函数
 models.py文件用于操作数据库
注册一个app
 在settings.py文件的INSTALLED_APPS列表中写入 'app名'

创建url和视图函数的对应关系
 在urls.py中通过 from app名 import views 来导入存放视图函数的views文件
 在urlpatterns列表中添加 path('网页名/', views.函数名)
 另一种对函数进行分类管理的方法
  在app目录下创建一个文件夹名为views，在该文件夹下为分类的函数分别创建 分类名.py 文件，在 分类名.py 文件中写入视图函数
  在urls.py中通过 from app名.views import 分类名 来导入存放函数的.py文件
  在urlpatterns列表中添加 path('网页名/', 分类名.函数名)
 同一个视图函数与多个网页相对应
  在urlpatterns列表中添加 path('网页1/<int:id>/网页2/', views.函数名)
  当访问 '网页1/数字/网页2/' 时，执行 def 函数名(request, id): return ，对应数字作为参数的值被传递给 id

创建视图函数
 在views.py中创建函数 def 函数名(request): return
  函数默认需要一个参数request
函数的返回值，即网页的数据响应
 当需要返回一个字符串时，return HttpResponse('字符串')
 当需要返回一个html文件时，return render(request, 'html文件名')
  这个html文件需要存放在app目录下的templates目录下
  request参数可以替换为任何的变量名，本质上是一个网络请求
 当需要返回一个其他的网站，即重定向至其他的网站时，return redirect('https://www.xxx.com')
 HttpResponse和redirect需要先进行导入，即from django.shortcuts import HttpResponse, redirect
数据接收
 request.method  可得知接收到的数据是get请求还是post请求，值为 'GET' 或 'POST'
 request.GET 值为get请求的内容
 request.POST  值为post请求的内容
 请求内容的值的数据类型是ImmutableMultiDict不可变的多重的字典，类似于字典，
  请求内容中的name作为字典的键，value作为字典的值，但是允许多个相同的键存在，同时是不可变的。
  当有两个name相同但value不同的数据被提交时，字典会将这两个value放在一个列表中作为一个name的键的值，即neme:[value1,value2]

数据提交
 两种提交方式
  get：提交的数据会在地址栏中网站地址的后面以 ?数据名1=数据值1&数据名2=数据名2 的形式被看到
  post：提交的数据不会在地址栏中被看到
 <form> </form>  包含被提交的数据块，需要在有其中<input type='submit'/>来进行提交，只会对有name属性的input标签进行提交，
  并且提交的是该标签的name属性的值和value属性的值。
  也可以通过在javascript中使用 该<form>标签.submit() 来提交该标签块，而不是在标签块内使用<input type='submit'/>按钮
  method属性  标明提交数据的方式
  action属性  表明数据被提交到的地址，当这个属性被省略时，表示数据被提交到当前的地址，django中action中的地址需要以/结尾
  当使用django接收数据时，需要在<form>标签中添加 {% csrf_token %} ,这样django在渲染html页面时，
  会在<form>标签中添加一个隐藏的<input type='hidden' name='csrfmiddlewarettoken' value='...'>标签，用于验证该请求
  如果不使用csrftoken，
   from django.views.decorators.csrf import csrf_exempt\
   @csrf_exempt
   def view(request): return

启动一个主机
 在manage.py的父文件夹中执行 python manage.py runserver

静态文件
 图片，css文件，js文件这些文件被称为静态文件
 静态文件一般放在app目录下static目录下的img，css，js，plugins目录
 导入静态文件时，除了使用对应标签然后用src/href指定文件路径的方式外，还可通过模板文本导入
  在html文件开头写 {% load static %}
  在导入文件处这样表示文件的路径
   "{% static 'static下的img或css或js或plugins目录/文件名' %}"

模板语法，模板语法对html中的占位符进行替换，并最终将一个不包含占位符的html文件返回给浏览器
 在页面函数中将一个变量传入html文件中
  def 函数名(request):
      return render(request, 'html文件名', {'变量名':值})  此时request也被传入至html中，可被调用
 同时在html文件中用 {{ 变量名 }} 来表明该变量的位置
 在html中获取一个列表的索引的值时，需要用 {{ 列表名.索引 }} 的方式
 在html中循环一个列表中的值的时，需要用 {% for i in 列表名 %} 开头，用 {% endfor %} 结束
 在html中获取一个字典的键的值时，需要用 {{ 字典名.键名 }} 的方式。此处的键名不需要加引号
 在html中同时循环一个字典中的键和值时，需要用 {% for x,y in 字典名 %} 开头，用 {% endfor %} 结束
 在html中通过判断传入变量的情况来进行条件选择时，需要用 {% if 条件 %}，{% elif 条件 %}，{% else %}，{% endif %}
 当需要在{{ }}中执行一个函数时，不能用()表示执行该函数，只需传入这个函数名，模板会自动添加括号
 当需要将传入的数据xxx与html中数据进行拼接时，{{ 'xxx' | xxx }}，|可进行字符串或数字的相加
模板继承
 在父模板中存在 {% block 内容名 %} {% endblock %} 时
 在子模板中使用 {% extends '父模板文件名' %},获取 {% block 内容名 %} {% endblock %} 之外的所有内容
 并在子模板中将需要添加的内容在 {% block 内容名 %} {% endblock %} 中写入
将传入字符串作为html标签进行渲染
 通常情况下，当 return render(request, 'html文件名', {'变量名':'<div>...</div>'}) 时，
 在html中，该变量的值不会被渲染为一个标签，而是在页面上将 '<div>...</div>' 作为字符串展示
 from django.utils.safestring import mark_safe
 return render(request, 'html文件名', {'变量名':mark_safe('<div>...</div>')})  使得字符串被作为html文本进行解析

cookie和session
 当接收到一个用户登录请求时，生成一个cookie，将这个cookie返回给用户浏览器
 同时将这个cookie保存在django数据库的django_session表的session_key列中，同时生成一个字典，保存在同一个表中的session_data列中
  def func(request):
       request.session[字典的键] = 字典的值  该函数完成如上操作
  request.session.get('字典的键')  获取cookie
  request.session.clear()  清除当前cookie
cookie的另一个设置方式
 def func(request):
      request.set_cookie("cookie名", cookie值)  设置cookie
      request.COOKIES.get("cookie名")  获取cookie
'''