'''
Ajax，Asynchronous Javascript And XML，即在前端实现与服务器异步通信

 XMLHttpRequest，用于在前端与服务器进行通信
  const xhr = new XMLHttpRequest()  创建xhr对象
  xhr.open('请求方法', '目标服务器地址')  指定访问方式和目标
  xhr.addEventListener('loadend', () => {  loadend用于检测请求的结束
       console.log(xhr.response)  xhr.respense用于保存服务器的返回值
  })
  xhr.send()  发出xhr请求
   发送get请求时，参数可放在服务器url中
   发送post请求时，
    xhr.setRequestHeader('Content-Type', 'application/json')  设置请求头中的数据，设置发送的数据为json
    xhr.send('a=1&b=2')  设置发送的参数
    xhr.send(JSON.stringify({ a: 1, b: 2}))  将发送的参数转换为json后发送

 XHR和Promise联合使用实现异步
  const p = new Promise((resolve, reject) => {
   const xhr = new XMLHttpRequest()
   xhr.open('请求方法', '目标服务器地址')
   xhr.addEventListener('loadend', () => {
       if (xhr.status >= 200 && xhr.status < 300) {  xhr对象中存在status的值为该次请求的响应码，以此来判断该次请求成功与失败
           resolve(xhr.response)  设置请求成功时的返回值
       } else {
           reject(xhr.response)  设置请求失败时的返回值
       }
   xhr.send()
  })
  p.then(result => {  在得到result，即xhr.response请求时才向下执行，实现异步
   console.log(result)
  }).catch(error => {
   console.log(error)
  })

 ajax，基于XHR和Promise，用于在不刷新页面的情况下提交get或post请求
  异步处理思想，通过静态的传递请求语句并得到请求结果，后通过DOM将页面中的某个元素的值动态的更新，来达到局部的数据更新效果
  $.ajax({url:'请求被提交到的地址',
         type:'get/post',
         data:{data1:xxx,data2:xxx},
         success:function(res){  res为目标页面接收到数据后的返回值
               pass  该函数为接收到res后执行的命令
         }
         })
   serialize批量获取form表单中数据
    data:$("#表单id").serialize()

 axios，基于ajax进行拓展的工具库
  axios({url:'请求被提交到的地址',
        method:'get/post',
        data:{data1:xxx,data2:xxx},
        }).then(res=>{  res为目标页面接收到数据后的返回值
              pass  该函数为接收到res后执行的命令
        }).catch(err=>{  err为目标页面返回的报错信息，.catch() 可省略
              pass
        })
  请求拦截器
   axios.interceptors.request.use(config => {  设置在发出请求之前所执行的函数，config为发出的axios请求
       pass
       return config
   })
  响应拦截器
   axios.interceptors.response.use(function(response) {  设置在对响应进行处理之前所执行的函数，response为所接收到的响应数据
       pass
       return response  response被传递为axios请求的result
   }, function(error){
       pass
       return Promise.reject(error)  error被传递为axios请求的error
   }
'''
