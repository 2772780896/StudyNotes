'''
函数
 定义
  Function 函数名($参数名){
      语句；
      return 返回值；
  }
   参数和return可省略，若return被省略，则返回值默认为 NULL
   函数可在定义之前被调用
   函数名由字母，数字，下划线构成，不能以数字开头
   参数可被赋予默认值，即 Function 函数名($参数名=值){}
   当在将变量的值传入为参数时，如果需要进行引用传递，即在函数内部对全局变量进行操作，则 Function 函数名(&$参数名){...$参数名...}，与global相似
   global也在php中可用，但是在创建全局变量时，即 global $变量名 时，不可对该变量赋值，可在创建之后再赋值
   静态变量  当在函数中被创建后，在编译时就对该变量赋值，当运行到赋值语句时不会再次执行
    static $变量名 = 值;  一般通过对该变量进行自加实现对函数执行次数的统计
   return会结束函数体，函数体内的return下方的代码不会被执行
   return也可以在php文件中使用，当该文件被包含之后，return作为该文件的返回值会成为 include '该文件.php' 这一语句的返回值。同样不会执行return下方的代码
   函数可通过 '函数名'() 的方式被调用

 输出函数
  echo $变量名  输出一个变量的值
  echo $变量名1,$变量名2  同时输出多个值
  print(...)  同echo，括号可省略
  print_r  $变量名  输出该变量的值
  var_dump  $变量名  输出该变量的值的类型和该值

 字符串函数
  字符串长度
   strlen(字符串)  获取字符串长度，以字节为单位
  字符串转换
   mb_strlen(字符串,'编码格式')  获取字符串在指定编码格式下的字节数，编码格式默认为ASCII。
    需先在php.ini中删除 extension=php_mbstring.dll 的注释
   implode('连接不同元素之间的字符',数组)  将数组中的元素用指定字符拼接，当拼接字符为空时，表示元素紧密拼接
   explode('遇到即将其前后字符分割为元素的字符',字符串)  将一个字符串中指定字符串左右的元素分割为数组
   str_split(字符串，数字)  将字符串用指定长度拆分成元素，组成数组
  字符串截取
   trim(字符串,字符)  返回从首尾去除指定字符后的字符串，当字符为空时，表示从首位开始去除空格
   ltrim(字符串,字符)  同trim()，但仅去除首
   rtrim(字符串,字符)  同trim()，但仅去除尾
   substr(字符串,起始位置,长度)  从起始位置开始截取字符串，起始位置从0开始数，当长度为空时，截取至尾
   strstr(字符串,字符)  从遇到指定字符开始，截取至尾
  字符串大小写转换
   strtolower(字符串)  将字符串中字母全部小写
   strtoupper(字符串)  将字符串中字母全部小写
   ucfirst(字符串)  将字符串中首字母大写
  字符串中字符查找
   strpos(字符串,字符)  返回目标字符在字符串中第一次出现的位置，从0开始记位，当目标字符不存在时，返回FALSE
   strrpos(字符串,字符)  返回目标字符在字符串中最后一次出现的位置，从0开始记位，当目标字符不存在时，返回FALSE
  字符串中字符替换
   str_replace(目标字符,替换字符,字符串)  将字符串中的目标字符替换为替换字符
  格式化字符串
   printf/sprintf(含有格式化字符的字符串,格式化字符1中的字符,格式化字符2中的字符...)  用指定字符替换字符串中的格式化字符，返回该字符串
    格式化字符
     %d  十进制数字
     %s  字符串
  字符串重复与打乱
   str_repeat(字符串,数字)  返回将字符串重复指定次数后的字符串
   str_shuffle(字符串)  返回将字符串中的每一个字符打乱后的字符串

 数组函数
  数组长度
   count(数组)  获取数组中元素的个数
  元素判断
   in_array(值,数组)  判断一个值是否是数组中一个元素的值
  遍历数组
   foreach函数
    foreach(数组 as $变量名){
       对 $变量名 进行的操作
    }                        $变量名为每一个元素的值
    foreach(数组 as $变量名1 => $变量名2){
       对 $变量名1，$变量名2 进行的操作
    }                                    $变量名1为每一个元素的下标，$变量名2为每一个元素的值
   while与each和list
    each(数组)  获取数组中的指针当前位置的下标和值，同时将指针下移一位，返回一个数组，数组中的下标0和下标key的值为当前元素的下标，
               下标1和下标value的值为当前元素的值，当指针移至数组末尾时，返回false
    list($变量名1,$变量名2...) = 数组  list并不算一个函数而是一个结构，获取数组中下标为0,1，2...的元素的值，并将这些值赋值给
                                  变量名1，变量名2，变量名3
    while(list($变量名1,$变量名2) = each(数组)){echo $变量名1,$变量名2}  each函数中一定有0和1下标，当指针至末尾时，循环结束
   array_keys(数组)  获取一个数组中的所有元素的下标，返回一个索引数组
   array_values(数组)  获取一个数组中的所有元素的值，返回一个索引数组
  数组排序
   sort(数组)  按照值的小到大排序，并重新赋予下标，返回值为true或false，修改后的数组被赋值给原数组
   rsort(数组)  sort函数的逆序排序
   asort(数组)  按照值的小到大排序。保留下标
   arsort(数组)  asort函数的逆序排序
   ksort(数组)  按照下标的小到大排序
   krsort(数组)  ksort函数的逆序排序
   shuffle(数组)  打乱数组，并重新赋予下标
   array_reverse(数组,TRUE/FALSE)  将数组排序反过来，TRUE为保留原数组的下标，默认为FALSE
  数组指针
   reset(数组)  将指针移至第一个元素并返回其值
   end(数组)  将指针移至最后一个元素并返回其值
   next(数组)  将指针移至下一个元素并返回其值，当指针移至数组之外时，返回false，并只能通过reset或end使指针回到数组
   prev(数组)  将指针移至上一个元素并返回其值
   current(数组)  返回指针当前所指元素的值
   key(数组)  返回指针当前所指元素的下标
  数组增减
   array_push(数组)  在数组末尾加入一个元素
   array_pop(数组)  在数组末尾删除一个元素
   array_shift(数组)  在数组首位加入一个元素，并将之前其他元素的下标+1
   array_unshift(数组)  在数组首位删除一个元素，并将之前其他元素的下标-1
   unset(数组[下标])  删除指定下标的元素
  数组转换
   implode(字符串,数组)  将数组中的元素的值用字符串拼接成一个字符串

 配置
  ini_set('配置项','值')  除了在php.ini中直接修改配置文件外，可通过这种方式对配置文件进行修改，但修改后的配置只在当前脚本生效


替代语法
 当html中存在 <?php if(条件){?> html文本 <?php }?> 或 <?php while(条件){?> html文本 <?php }?> 时，
 可以替换为 <?php if(条件):?> html文本 <?php endif;?> 及 <?php while(条件):?> html文本 <?php endwhile;?>
 即用 : 替代 { ，用 endxxx; 替代 }

报错
 显示
  报错级别
   在php.ini中设置error_reporting的参数
   或在代码中执行函数 Error_reporting(报错级别)
   或在代码中执行函数 ini_set('配置文件中的配置项的名','配置项的值') ，即 ini_set('error_reporting','E_ALL')
    该方法可用于所有的配置项的修改，优先级高于配置文件
  报错显示
   在php.ini中设置display_errors的参数为On或Off
   或在代码中执行函数 ini_set('display_errors','On')
 日志
  开启日志  在php.ini中修改log_errors的参数为On
  指定日志记录的路径  在php.ini中修改error_log的参数为存储log文件的路径'E:\Program Files\php-8.3.12-Win32-vs16-x64\errorlog\php_errors.log'
 错误抑制
  在函数前加上@，当函数执行报错时不显示

文件操作
 文件夹
  mkdir('路径')  创建文件夹
  rmdir('路径')  删除文件夹
  opendir('路径')  打开文件夹，返回一个路径资源，包含该文件夹下的所有文件
  readdir(路径资源)  返回该资源中的指针所在位置的文件名，然后将指针后移一位
   任何文件夹中都有.和..两个文件，前者代表当前文件夹，后者代表父文件夹，执行readdir()时的前两个结果一定为这两个文件
  is_dir('路径')  判断指定文件是否是一个文件夹
  closedir(路径资源)  关闭路径资源
  scandir('路径')  执行opendir()，readdir()，closedir()的操作，返回一个索引数组，包含指定文件夹下的所有文件
 文件
  file_get_contents('路径')  获取文件中的内容
  file('路径')  按行获取文件中的内容，返回一个索引数组，文件中的每一行作为一个元素
  file_put_contents('路径',内容)  将内容写入文件中，如果文件不存在，创建该文件
  fopen('路径',打开模式)  用指定模式打开一个文件，返回一个文件资源
   打开模式
    'r'  只读方式打开，指针在文件头
    'r+'  读写方式打开，指针在文件头
    'w'  写入方式打开，清空文件内容，指针在文件头
    'w+'  读写方式打开，清空文件内容，指针在文件头
    'a'  写入方式打开，指针在文件尾
    'a'  读写方式打开，指针在文件尾
  fseek(文件资源,位置)  设置指针的位置
  fread(文件资源,读取长度)  在文件中读取指定长度的字符
  fgetc(文件资源)  获取当前指针所在位置的字符，并将指针后移一位
  fgets(文件资源,字符串长度)  按照字符串长度获取指针所在位置的字符，并将指针后移一位，长度默认为一行
  fwrite(文件资源,写入内容)  在文件中写入指定内容
  fclose(文件资源)  关闭文件资源
  is_file('路径')  判断是否只是一个文件而不是文件夹
  filesize('路径')  获取文件大小
  unlink('路径')  删除文件名与文件内容在硬盘上的存储空间的连接，即存储空间不会再被引用，即删除该文件
  filemtime('路径')  获取文件最后一次修改的时间
 编码
  iconv('GBK','UTF-8','路径')  将以GBK编码的文件转换为UTF-8，返回一个转换后的文件，将该文件赋值给原路径可实现覆盖
包含文件
 include 'xxx.php'  相对路径，包含同一父文件夹下的为该名的文件，相当于在include函数执行的位置嵌入目标文件的所有内容
 include 'E:/.../xxx.php'  绝对路径
 include_once  当多次对同一文件进行包含时，不会再次包含已经被包含的文件
 require  同include，但是include包含的文件中有报错时，include下方的代码依然执行，require不会再执行下方代码

curl  用于发送http请求
 在php.ini中取消 extension=php_curl.dll 的注释  开启curl拓展
 curl_init()  创建一个curl连接，返回一个curl资源
 curl_setOpt(curl资源,设置项名,设置项值)  设置请求选项
  设置项名与设置项值
   CURLOPT_URL 'index.php'  设置请求发向的网页
   CURLOPT_RETURNTRANSFER TRUE  设置将服务器的响应以文件流的形式返回至php脚本
   CURLOPT_POST 1  是否用post方式发送请求，默认为get
   CURLOPT_POSTFIELDS '数据名1=数据值1&数据名2=数据值2'或array('数据名1' => 数据值1,'数据名2' => 数据值2)  设置post数据的请求体
   CURLOPT_HEADER 1  是否获取服务器的响应的响应行和响应头信息，默认不获取
 curl_exec(curl资源)  执行请求
 curl_close(curl资源)  关闭curl连接
'''