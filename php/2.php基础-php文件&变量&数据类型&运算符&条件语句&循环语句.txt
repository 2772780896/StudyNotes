'''
php文件中可写入html代码

php代码块的标记  用于在php文件中包裹所有php代码
    asp标记 <% 代码 %>  #需要在php.ini中修改 short_open_tag 的参数为 On
    短标记 <? 代码 ?>  #需要在php.ini中修改 asp_tags 的参数为 On
    脚本标记 <script language="php">代码</script>
    标准标记 <?php 代码?>  #最常用

注释
    //  注释该行后面的内容
    #   注释改行后面的内容
    /*  代码 */ 注释两者之间的全部内容

行结束符
    ;  在一行的末尾使用，表示该行的结束
    ?>  带有结束符的效果，末行可以不用;

变量
    $变量名
        变量名由字母，数字，_构成，不能以数字开头
        当不存在该变量名时，创建该变量
        当存在该变量名时，引用该变量
        当$后为一个值为字符串的变量时，视为直接将$与该字符拼接，作为变量名
            所以存在 $a='b'; $b='xxx'; 此时 echo $$a='xxx' 的结果为 'xxx'
            但是，直接将$与''或""拼接时，会导致语法报错
    $变量名 = 值
        当不存在该变量名时，创建该变量的同时赋值
        当存在该变量名时，修改该变量的值
    unset($变量名)  删除一个变量
    预定义变量  系统自定义的变量
        $_GET  通过get提交的数据
        $_POST  通过post提交的数据
        $_REQUEST  通过get和post提交的数据
        $_SESSION  session数据
        $_COOKIE  cookie数据
        $_FILES  用户上传的文件
        $_SERVER  服务器信息
        $_ENV  环境信息
        GLOBALS  php中的所有环境变量
    $变量名1 = $变量名2  值传递，将变量名2的值复制给变量名1
    $变量名1 = &$变量名2  引用传递，使变量名2和变量名1共用同一个值

常量
    定义一个常量，两种方法，定义常量时必须赋值，且不可修改值
        define('常量名',值);  #常量名规则与变量名相似，但一般以大写字母开头
        const 常量名 = 值;
    系统常量
        PHP_VERSION  php版本
        PHP_INT_SIZE  整型数据占用的字节数，为4
        PHP_INT_MAX  整型数据的最大值，为2147483647，即2**32-1
    系统魔术常量
        __DIR__  被执行脚本的文件的父文件夹所在电脑的绝对路径
        __FILE__  被执行脚本的文件所在电脑的绝对路径
        __NAMESPACE__  所属的命名空间
        __CLASS__  所属的类
        __METHOD__  所属的方法

数据类型
    整型 int/integer 4字节 在创建整型数据时可创建不同进制的数据，但使用echo输出时都会转换为10进制
        $变量名 = 数字  10机制
        $变量名 = 0b数字  2进制
        $变量名 = 0数字  8进制
        $变量名 = 0x数字  16进制
    浮点型 float/double 8字节
    字符串型 string
        ''/""  可用单引号或双引号定义字符串
            转义字符
                \'  在单引号中显示单引号字符串
                \"  在双引号中显示双引号字符串
                \r  回到当前行的行首位置
                \n  到达新一行
                \t  相当于table，即四个空格
                \$  使\$后的字符串成为变量名，变量名在末尾以空格与其他字符串隔开，或使用 {$变量名} 的方式限定字符串中变量名的范围
                    单引号中只能转义\'，双引号中除了\'外都能转义
        结构化字符串  用于在文本中保留table，换行，空格等格式
            nowdoc字符串，不用单引号创建的单引号字符串
                <<<'EOD'
                        字符串文本
                EOD;
                    在 <<<'EOD' 后不可跟任何内容，甚至是空格
                    EOD; 必须位于一行行首，其前不能有任何内容，甚至是table键
            heredoc字符串，不用双引号创建的双引号字符串
                <<<EOD
                                字符串文本
                EOD;  # EOD;
    布尔类型 bool/boolean
    数组类型 array
        创建数组
            array(元素1,元素2...)
            [元素1,元素2...]
            $变量名[] = 元素  当数组不存在时，创建该数组
            该三种方法创建数组时会为元素添加自增的下标数字，此时可将下标数字看做索引
            array(下标1=>元素1,下标2=>元素2...)  下标可为任意数字或字符串，此时类似于字典中的key
        数组中添加元素
            $变量名[下标数字] = 元素  该数字与索引并不相同，更像是字典中的key
            $变量名[下标字符串] = 元素  此时字符串与key类似
            $变量名[] = 元素  当数组存在时，添加该元素，若之前插入了一个不连续的更大的下标数字，那么新元素的下标数字从插入的下标数字开始自增
    对象类型 object
    空类型 NULL
    资源类型 resource 存放资源数据(php外部数据，如数据库，文件)
数据类型转换
    (数据类型名，如int/float等)$变量名  输出对该变量的值进行对应的数据类型转换后的结果
    Settype($变量名,数据类型)  将该变量的值的数据类型修改为对应数据类型，返回是否转换成功的布尔值
数据类型判断
    is_数据类型名($变量名)  对变量的值的数据类型进行判断，返回布尔值
数据类型获取
    Gettype($变量名)  获取变量的值的数据类型

运算符
    ==/!=  只对大小进行比较
    ===/!==  同时对大小和数据类型进行比较
    &&  同and
    ||  同or
    !  同not
    .  当在两个字符串之间使用时，相当于+
    .=  当在两个字符串之间使用时，相当于+=
    @  错误抑制符，当其后的语句出现报错后，不显示报错信息

条件语句
    if(条件1){
        语句1
    }elseif(条件2){
        语句2
    }else{
        语句3
    }               当
        当满足条件1时，执行语句1，当不满足条件1满足条件2时，执行语句2，当都不满足时，执行语句3。
        elseif和else可省略

循环语句
    while循环
        while(条件){
            语句
        }
            当满足条件时，执行语句
    do_while循环
        do{
                语句
        }while(条件)
            先执行一次语句，然后当满足条件时，再次执行语句
    打断循环
        continue  打断当前循环，进行下一步循环
        break  终止全部循环
'''